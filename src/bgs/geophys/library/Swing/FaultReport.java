/*
 * FaultReport.java
 *
 * Created on 21 February 2005, 13:41
 */

package bgs.geophys.library.Swing;

/**
 *
 * @author  smf
 */
public class FaultReport extends javax.swing.JDialog {

    // private members
    private javax.swing.JLabel DetailsLable [];
    private javax.swing.JTextArea DetailsTextArea [];
    private Throwable stored_exception;
    
    
    /** Creates new form FaultReport
     * @param parent the parent component
     * @param modal true for a modal dialog
     * @param program_name program name, version info.
     * @param email_address destination for fault reports
     * @param details_prompts array of prompts for information from the user - if the
     *        fault is due to lack of memory, this parameter will be overidden by an internal
     *        default
     * @param user_exception the exception that generated the fault or null for no exception */
    public FaultReport(java.awt.Frame parent, boolean modal,
                       String program_name, String email_address,
                       String details_prompts [],
                       Throwable user_exception) 
    {
        super(parent, modal);
        
        int count;
        javax.swing.JPanel panel;
        

        stored_exception = user_exception;
        
        initComponents();
        
        // override details prompts for memory faults
        if (user_exception instanceof OutOfMemoryError)
        {
            details_prompts = new String [1];
            details_prompts [0] = "<html>Java has run out of memory. It is possible to increase the amount of<br>" +
                                        "memory available to Java. To help us do this, please tell us what windows<br>" +
                                        "you had open and what you were trying to do when the problem occurred:";
        }
        
        // create the details prompts
        DetailsLable = new javax.swing.JLabel [details_prompts.length];
        DetailsTextArea = new javax.swing.JTextArea [details_prompts.length];
        for (count=0; count< details_prompts.length; count++)
        {
            DetailsLable [count] = new javax.swing.JLabel (details_prompts [count]);
            DetailsTextArea [count] = new javax.swing.JTextArea (4, 40);
            panel = new javax.swing.JPanel (new java.awt.BorderLayout ());
            panel.add (DetailsLable [count], "North");
            panel.add (DetailsTextArea [count], "Center");
            DetailsPanel.add (panel);
        }
        
        // fill in the basic information
        TitleTextField.setText (program_name);
        try
        {
          JavaVersionTextField.setText (System.getProperty("java.vendor") + " " + System.getProperty("java.version"));
        }
        catch (Exception e)
        {
          JavaVersionTextField.setText ("Unknown");
        }
        DateTextField.setText (java.text.DateFormat.getDateInstance().format (new java.util.Date ()));
        MailToLabel4.setText(email_address);
        
        // re-pack the form
        pack ();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        TitlePanel = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        TitleTextField = new javax.swing.JTextField();
        JavaVersionLabel = new javax.swing.JLabel();
        JavaVersionTextField = new javax.swing.JTextField();
        DateLabel = new javax.swing.JLabel();
        DateTextField = new javax.swing.JTextField();
        Separator1 = new javax.swing.JSeparator();
        DetailsPanel = new javax.swing.JPanel();
        ActionPanel = new javax.swing.JPanel();
        Separator2 = new javax.swing.JSeparator();
        MailToLabel = new javax.swing.JLabel();
        MailToLabel2 = new javax.swing.JLabel();
        MailToLabel3 = new javax.swing.JLabel();
        MailToLabel4 = new javax.swing.JLabel();
        Separator3 = new javax.swing.JSeparator();
        CopyButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Software Fault Report");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        TitlePanel.setLayout(new java.awt.GridBagLayout());

        TitleLabel.setText("Program name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        TitlePanel.add(TitleLabel, gridBagConstraints);

        TitleTextField.setColumns(30);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        TitlePanel.add(TitleTextField, gridBagConstraints);

        JavaVersionLabel.setText("Java Version:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        TitlePanel.add(JavaVersionLabel, gridBagConstraints);

        JavaVersionTextField.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        TitlePanel.add(JavaVersionTextField, gridBagConstraints);

        DateLabel.setText("Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        TitlePanel.add(DateLabel, gridBagConstraints);

        DateTextField.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        TitlePanel.add(DateTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        TitlePanel.add(Separator1, gridBagConstraints);

        getContentPane().add(TitlePanel, java.awt.BorderLayout.NORTH);

        DetailsPanel.setLayout(new java.awt.GridLayout(0, 1));

        getContentPane().add(DetailsPanel, java.awt.BorderLayout.CENTER);

        ActionPanel.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ActionPanel.add(Separator2, gridBagConstraints);

        MailToLabel.setText("A software fault has occurred. To report this fault please fill out");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        ActionPanel.add(MailToLabel, gridBagConstraints);

        MailToLabel2.setText("the form, then press 'Copy to Clipboard'. Paste the clipboard");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        ActionPanel.add(MailToLabel2, gridBagConstraints);

        MailToLabel3.setText("contents into a mail message and send it to: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        ActionPanel.add(MailToLabel3, gridBagConstraints);

        MailToLabel4.setText("MailDestination");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        ActionPanel.add(MailToLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ActionPanel.add(Separator3, gridBagConstraints);

        CopyButton.setText("Copy Report to Clipboard");
        CopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyButtonActionPerformed(evt);
            }
        });

        ActionPanel.add(CopyButton, new java.awt.GridBagConstraints());

        CloseButton.setText("Close");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        ActionPanel.add(CloseButton, new java.awt.GridBagConstraints());

        getContentPane().add(ActionPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void CopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyButtonActionPerformed
        java.awt.datatransfer.Clipboard clipboard;
        java.awt.datatransfer.StringSelection strsel;

        clipboard = java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
        try
        {
            strsel  = new java.awt.datatransfer.StringSelection (formatFaultReport ());
            clipboard.setContents (strsel, strsel);
        }
        catch (IllegalStateException e)
        {
            javax.swing.JOptionPane.showMessageDialog (this, "Unable to copy data to clipboard", 
                                                       "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CopyButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ActionPanel;
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton CopyButton;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JTextField DateTextField;
    private javax.swing.JPanel DetailsPanel;
    private javax.swing.JLabel JavaVersionLabel;
    private javax.swing.JTextField JavaVersionTextField;
    private javax.swing.JLabel MailToLabel;
    private javax.swing.JLabel MailToLabel2;
    private javax.swing.JLabel MailToLabel3;
    private javax.swing.JLabel MailToLabel4;
    private javax.swing.JSeparator Separator1;
    private javax.swing.JSeparator Separator2;
    private javax.swing.JSeparator Separator3;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JPanel TitlePanel;
    private javax.swing.JTextField TitleTextField;
    // End of variables declaration//GEN-END:variables

    private String formatFaultReport ()
    {
        int count;
        String formatted_report, sep, property, msg;
        StackTraceElement stack [];
        java.util.Enumeration enumeration;
        
        sep = null;
        try { sep = System.getProperty("line.separator"); }
        catch (Exception e) { sep = "\n"; }
        
        formatted_report = "";
        
        formatted_report += "Program name: " + TitleTextField.getText () + sep;
        formatted_report += "Java version: " + JavaVersionTextField.getText () + sep;
        formatted_report += "Date: " + DateTextField.getText () + sep;
        for (count=0; count<DetailsLable.length; count++)
        {
            formatted_report += sep +
                                DetailsLable[count].getText() + sep +
                                DetailsTextArea[count].getText() + sep;
        }
        formatted_report += sep;
        
        formatted_report += "System properties:" + sep;
        enumeration = System.getProperties().propertyNames();
        while (enumeration.hasMoreElements())
        {
            property = (String) enumeration.nextElement();
            try
            {
                formatted_report += " " + property + " = " + System.getProperty (property) + sep;
            }
            catch (Exception e) { }
        }
        formatted_report += sep;
        
        if (stored_exception != null)
        {
            formatted_report += "Exception details:" + sep +
                                " " + stored_exception.toString () + sep;
            msg = stored_exception.getMessage();
            if (msg != null)
                formatted_report += " Message: " + msg + sep;
            formatted_report += " Stack trace:" + sep;
            try
            {
              stack = stored_exception.getStackTrace();
              for (count=0; count<stack.length; count++)
                  formatted_report += "  " + stack [count].toString() + sep;
            }
            catch (Exception e)
            {
                formatted_report += "  Stack trace not available" + sep +
                                    sep;
            }
        }
        
        return formatted_report;
    }
    
    
}
