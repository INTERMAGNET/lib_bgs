package bgs.geophys.library.Swing.Wizard;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * This class is responsible for reacting to events generated by pushing any of the
 * three buttons, 'Next', 'Previous', and 'Cancel.' Based on what button is pressed,
 * the controller will update the model to show a new panel and reset the state of
 * the buttons as necessary.
 */
public class WizardController implements ActionListener {
    
    private Wizard wizard;
    private Vector<WizardListeners.WizardButtonListener> buttonListeners;
    
    /**
     * This constructor accepts a reference to the Wizard component that created it,
     * which it uses to update the button components and access the WizardModel.
     * @param w A callback to the Wizard component that created this controller.
     */    
    public WizardController(Wizard w) {
        wizard = w;
        buttonListeners = new Vector<WizardListeners.WizardButtonListener> ();
    }
    
    public void addButtonListener (WizardListeners.WizardButtonListener listener) {
        buttonListeners.add (listener);
    }
    
    public void removeButtonListener (WizardListeners.WizardButtonListener listener) {
        buttonListeners.remove(listener);
    }
    
    /**
     * Calling method for the action listener interface. This class listens for actions
     * performed by the buttons in the Wizard class, and calls methods below to determine
     * the correct course of action.
     * @param evt The ActionEvent that occurred.
     */    
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        WizardEvents wizard_events;
        WizardEvents.WizardButtonEvent btn_evt;
        Iterator<WizardListeners.WizardButtonListener> i;
        
        wizard_events = new WizardEvents ();
        if (evt.getActionCommand().equals(Wizard.CANCEL_BUTTON_ACTION_COMMAND))
        {
            cancelButtonPressed();
            btn_evt = wizard_events.makeWizardButtonEvent(WizardEvents.BUTTON_CANCEL, evt);
        }
        else if (evt.getActionCommand().equals(Wizard.BACK_BUTTON_ACTION_COMMAND))
        {
            backButtonPressed();
            btn_evt = wizard_events.makeWizardButtonEvent(WizardEvents.BUTTON_BACK, evt);
        }
        else if (evt.getActionCommand().equals(Wizard.NEXT_BUTTON_ACTION_COMMAND))
        {
            nextButtonPressed();
            btn_evt = wizard_events.makeWizardButtonEvent(WizardEvents.BUTTON_NEXT, evt);
        }
        else btn_evt = null;
        
        if (btn_evt != null)
        {
            for (i=buttonListeners.iterator(); i.hasNext(); )
                i.next().buttonClicked(btn_evt);
        }
    }
    
    
    
    private void cancelButtonPressed() {
        
        wizard.close(Wizard.CANCEL_RETURN_CODE);
    }

    private void nextButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        //  If it is a finishable panel, close down the dialog. Otherwise,
        //  get the ID that the current panel identifies as the next panel,
        //  and display it.
        
        Object nextPanelDescriptor = descriptor.getNextPanelDescriptor();
        
        if (nextPanelDescriptor instanceof WizardPanelDescriptor.FinishIdentifier) {
            WizardPanelDescriptor oldPanelDescriptor = wizard.getModel().getCurrentPanelDescriptor();
            if (oldPanelDescriptor != null)
            {
                if (oldPanelDescriptor.aboutToHidePanel())
                    wizard.close(Wizard.FINISH_RETURN_CODE);
            }
        } else {        
            wizard.setCurrentPanel(nextPanelDescriptor);
        }
        
    }

    private void backButtonPressed() {
 
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
 
        //  Get the descriptor that the current panel identifies as the previous
        //  panel, and display it.
        
        Object backPanelDescriptor = descriptor.getBackPanelDescriptor();        
        wizard.setCurrentPanel(backPanelDescriptor);
        
    }

    
    void resetButtonsToPanelRules() {
    
        //  Reset the buttons to support the original panel rules,
        //  including whether the next or back buttons are enabled or
        //  disabled, or if the panel is finishable.
        
        WizardModel model = wizard.getModel();
        WizardPanelDescriptor descriptor = model.getCurrentPanelDescriptor();
        
        model.setCancelButtonText(wizard.getCancelButtonText());
        model.setCancelButtonIcon(wizard.getCancelButtonIcon());
        
        //  If the panel in question has another panel behind it, enable
        //  the back button. Otherwise, disable it.
        model.setBackButtonText(wizard.getBackButtonText());
        model.setBackButtonIcon(wizard.getBackButtonIcon());
        
        if (descriptor.getBackPanelDescriptor() != null)
            model.setBackButtonEnabled(Boolean.TRUE);
        else
            model.setBackButtonEnabled(Boolean.FALSE);

        //  If the panel in question has one or more panels in front of it,
        //  enable the next button. Otherwise, disable it.
 
        if (descriptor.getNextPanelDescriptor() != null)
            model.setNextFinishButtonEnabled(Boolean.TRUE);
        else
            model.setNextFinishButtonEnabled(Boolean.FALSE);
 
        //  If the panel in question is the last panel in the series, change
        //  the Next button to Finish. Otherwise, set the text back to Next.
        
        if (descriptor.getNextPanelDescriptor() instanceof WizardPanelDescriptor.FinishIdentifier) {
            model.setNextFinishButtonText(wizard.getFinishButtonText());
            model.setNextFinishButtonIcon(wizard.getFinishButtonIcon());
        } else {
            model.setNextFinishButtonText(wizard.getNextButtonText());
            model.setNextFinishButtonIcon(wizard.getNextButtonIcon());
        }
        
    }
    
    
}
