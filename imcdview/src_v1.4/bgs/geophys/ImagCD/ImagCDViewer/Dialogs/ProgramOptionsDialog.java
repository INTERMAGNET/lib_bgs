/*
 * ProgramOptionsDialog.java
 *
 * Created on 13 July 2009, 16:18
 */

package bgs.geophys.ImagCD.ImagCDViewer.Dialogs;

import bgs.geophys.ImagCD.ImagCDViewer.CommandInterpreter;
import bgs.geophys.ImagCD.ImagCDViewer.GlobalObjects;

/**
 *
 * @author  smf
 */
public class ProgramOptionsDialog extends javax.swing.JDialog 
{

    public static int orig_size_percent = -1;
    
    /** Creates new form ProgramOptionsDialog */
    public ProgramOptionsDialog(java.awt.Frame parent, boolean modal) 
    {
        super(parent, modal);
        initComponents();
        
        FontSizeSpinner.setValue (new Integer (getProgramFontSizePercent(false)));
    }
    
    /** Creates new form ProgramOptionsDialog */
    public ProgramOptionsDialog(java.awt.Dialog parent, boolean modal) 
    {
        super(parent, modal);
        initComponents();
        
        FontSizeSpinner.setValue (new Integer (getProgramFontSizePercent(false)));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        OptionsPanel = new javax.swing.JPanel();
        FontSizeLabel = new javax.swing.JLabel();
        FontSizeSpinner = new javax.swing.JSpinner();
        Separator1 = new javax.swing.JSeparator();
        HelpLabel = new javax.swing.JLabel();
        ButtonsPanel = new javax.swing.JPanel();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Program Options");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        OptionsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        OptionsPanel.setLayout(new java.awt.GridBagLayout());

        FontSizeLabel.setText("Font size (percent):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        OptionsPanel.add(FontSizeLabel, gridBagConstraints);

        FontSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 50, 300, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        OptionsPanel.add(FontSizeSpinner, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        OptionsPanel.add(Separator1, gridBagConstraints);

        HelpLabel.setText("<html>Note that changes will not take place<br>until the program restarts.</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        OptionsPanel.add(HelpLabel, gridBagConstraints);

        getContentPane().add(OptionsPanel, java.awt.BorderLayout.CENTER);

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });
        ButtonsPanel.add(OKButton);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });
        ButtonsPanel.add(CancelButton);

        getContentPane().add(ButtonsPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeDialog ();
    }//GEN-LAST:event_formWindowClosing

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        closeDialog ();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        GlobalObjects.configuration.setProperty ("ProgramFontSize", FontSizeSpinner.getValue().toString());
        GlobalObjects.command_interpreter.interpretCommand ("new_program_options");
        closeDialog ();
    }//GEN-LAST:event_OKButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel FontSizeLabel;
    private javax.swing.JSpinner FontSizeSpinner;
    private javax.swing.JLabel HelpLabel;
    private javax.swing.JButton OKButton;
    private javax.swing.JPanel OptionsPanel;
    private javax.swing.JSeparator Separator1;
    // End of variables declaration//GEN-END:variables

    private void closeDialog ()
    {
        this.setVisible(false);
        this.dispose();
    }
    
    public static float getProgramFontSize (boolean get_orig_size)
    {
        return (float) getProgramFontSizePercent (get_orig_size) / 100.0f;
    }

    public static int getProgramFontSizePercent (boolean get_orig_size)
    {
        int ret_val;

        // if not already retrieved, get the original size
        if (orig_size_percent < 0)
        {
            try
            {
                orig_size_percent = Integer.parseInt (GlobalObjects.configuration.getProperty ("ProgramFontSize", "100"));
            }
            catch (NumberFormatException e)
            {
                orig_size_percent = 100;
            }
        }

        if (get_orig_size)
            ret_val = orig_size_percent;
        else
        {
            try
            {
                ret_val = Integer.parseInt (GlobalObjects.configuration.getProperty ("ProgramFontSize", "100"));
            }
            catch (NumberFormatException e)
            {
                ret_val = 100;
            }
        }
        
        return ret_val;
    }
    
    public static float getMinFontSize ()
    {
        return 8.0f;
    }
}
