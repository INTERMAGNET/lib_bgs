/*
 * ExportOptionsDialog.java
 *
 * Created on 23 September 2009, 10:25
 */

package bgs.geophys.ImagCD.ImagCDViewer.Dialogs;

import bgs.geophys.ImagCD.ImagCDViewer.GlobalObjects;
import bgs.geophys.library.Data.GeomagAbsoluteValue;

/**
 *
 * @author  smf
 */
public class ExportOptionsDialog extends javax.swing.JDialog {

    /** Creates new form ExportOptionsDialog */
    public ExportOptionsDialog(java.awt.Frame parent, boolean modal) 
    {
        super(parent, modal);
        
        initComponents();
        initComponents2 ();
    }
    
    /** Creates new form ExportOptionsDialog */
    public ExportOptionsDialog(java.awt.Dialog parent, boolean modal) 
    {
        super(parent, modal);
        
        initComponents();
        initComponents2 ();
    }
    
    private void initComponents2 ()
    {
        // set dialog from properties
        switch (getFourthElementProperty())
        {
            case GeomagAbsoluteValue.COMPONENT_F: FourthElementVectorFRadioButton.setSelected (true); break;
            case GeomagAbsoluteValue.COMPONENT_F_SCALAR: FourthElementScalarFRadioButton.setSelected (true); break;
            default: FourthElementDeltaFRadioButton.setSelected (true); break;
        }
        MinuteIntervalTypeTextField.setText (getIaga2002MinuteIntervalType());
        HourIntervalTypeTextField.setText (getIaga2002HourIntervalType());
        DayIntervalTypeTextField.setText (getIaga2002DayIntervalType());
        MinuteDigitalSamplingTextField.setText (getIaga2002MinuteDigitalSampling());
        HourDigitalSamplingTextField.setText (getIaga2002HourDigitalSampling());
        DayDigitalSamplingTextField.setText (getIaga2002DayDigitalSampling());
        
        pack ();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        FourthElementButtonGroup = new javax.swing.ButtonGroup();
        GeneralOptionsPanel = new javax.swing.JPanel();
        FourthElementLabel = new javax.swing.JLabel();
        FourthElementScalarFRadioButton = new javax.swing.JRadioButton();
        FourthElementVectorFRadioButton = new javax.swing.JRadioButton();
        FourthElementDeltaFRadioButton = new javax.swing.JRadioButton();
        Iaga2002OptionsPanel = new javax.swing.JPanel();
        MinuteIntervalTypeLabel = new javax.swing.JLabel();
        MinuteIntervalTypeTextField = new javax.swing.JTextField();
        HourIntervalTypeLabel = new javax.swing.JLabel();
        HourIntervalTypeTextField = new javax.swing.JTextField();
        DayIntervalTypeLabel = new javax.swing.JLabel();
        DayIntervalTypeTextField = new javax.swing.JTextField();
        MinuteDigitalSamplingLabel = new javax.swing.JLabel();
        MinuteDigitalSamplingTextField = new javax.swing.JTextField();
        HourDigitalSamplingLabel = new javax.swing.JLabel();
        HourDigitalSamplingTextField = new javax.swing.JTextField();
        DayDigitalSamplingLabel = new javax.swing.JLabel();
        DayDigitalSamplingTextField = new javax.swing.JTextField();
        ButtonPanel = new javax.swing.JPanel();
        SetDefaultsButton = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Export Options");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        GeneralOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Options"));

        FourthElementLabel.setText("Fourth element:");
        FourthElementLabel.setToolTipText("The type of 'F' data that will be exported in the fourth element.");
        GeneralOptionsPanel.add(FourthElementLabel);

        FourthElementButtonGroup.add(FourthElementScalarFRadioButton);
        FourthElementScalarFRadioButton.setText("Scalar F");
        FourthElementScalarFRadioButton.setToolTipText("The type of 'F' data that will be exported in the fourth element.");
        FourthElementScalarFRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        FourthElementScalarFRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        GeneralOptionsPanel.add(FourthElementScalarFRadioButton);

        FourthElementButtonGroup.add(FourthElementVectorFRadioButton);
        FourthElementVectorFRadioButton.setSelected(true);
        FourthElementVectorFRadioButton.setText("Vector F");
        FourthElementVectorFRadioButton.setToolTipText("The type of 'F' data that will be exported in the fourth element.");
        FourthElementVectorFRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        FourthElementVectorFRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        GeneralOptionsPanel.add(FourthElementVectorFRadioButton);

        FourthElementButtonGroup.add(FourthElementDeltaFRadioButton);
        FourthElementDeltaFRadioButton.setText("Delta-F (vector - scalar)");
        FourthElementDeltaFRadioButton.setToolTipText("The type of 'F' data that will be exported in the fourth element.");
        FourthElementDeltaFRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        FourthElementDeltaFRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        GeneralOptionsPanel.add(FourthElementDeltaFRadioButton);

        getContentPane().add(GeneralOptionsPanel, java.awt.BorderLayout.PAGE_START);

        Iaga2002OptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("IAGA 2002 Options"));
        Iaga2002OptionsPanel.setLayout(new java.awt.GridBagLayout());

        MinuteIntervalTypeLabel.setText("Minute interval type: ");
        MinuteIntervalTypeLabel.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for minute data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(MinuteIntervalTypeLabel, gridBagConstraints);

        MinuteIntervalTypeTextField.setColumns(20);
        MinuteIntervalTypeTextField.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for minute data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(MinuteIntervalTypeTextField, gridBagConstraints);

        HourIntervalTypeLabel.setText("Hour interval type: ");
        HourIntervalTypeLabel.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for hour data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(HourIntervalTypeLabel, gridBagConstraints);

        HourIntervalTypeTextField.setColumns(20);
        HourIntervalTypeTextField.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for hour data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(HourIntervalTypeTextField, gridBagConstraints);

        DayIntervalTypeLabel.setText("Day interval type: ");
        DayIntervalTypeLabel.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for day data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(DayIntervalTypeLabel, gridBagConstraints);

        DayIntervalTypeTextField.setColumns(20);
        DayIntervalTypeTextField.setToolTipText("<html>\nThe contents of the 'Data Interval Type' field for day data.<br>\nIf left blank the software will use a default value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(DayIntervalTypeTextField, gridBagConstraints);

        MinuteDigitalSamplingLabel.setText("Minute digital sampling: ");
        MinuteDigitalSamplingLabel.setToolTipText("<html>\nThe contents of the 'Digital Sampling'' field for minute data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(MinuteDigitalSamplingLabel, gridBagConstraints);

        MinuteDigitalSamplingTextField.setColumns(20);
        MinuteDigitalSamplingTextField.setToolTipText("<html>\nThe contents of the 'Digital Sampling' field for minute data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(MinuteDigitalSamplingTextField, gridBagConstraints);

        HourDigitalSamplingLabel.setText("Hour digital sampling: ");
        HourDigitalSamplingLabel.setToolTipText("<html>\nThe contents of the 'Digital Sampling' field for hour data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(HourDigitalSamplingLabel, gridBagConstraints);

        HourDigitalSamplingTextField.setColumns(20);
        HourDigitalSamplingTextField.setToolTipText("<html>\nThe contents of the Digital Sampling' field for hour data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(HourDigitalSamplingTextField, gridBagConstraints);

        DayDigitalSamplingLabel.setText("Day digital sampling: ");
        DayDigitalSamplingLabel.setToolTipText("<html>\nThe contents of the 'Digital Sampling' field for day data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Iaga2002OptionsPanel.add(DayDigitalSamplingLabel, gridBagConstraints);

        DayDigitalSamplingTextField.setColumns(20);
        DayDigitalSamplingTextField.setToolTipText("<html>\nThe contents of the 'Digital Sampling' field for day data.<br>\nIf left blank the software will try to use the metadata in the<br>\nheader of the binary file to calculate a value.\n</html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        Iaga2002OptionsPanel.add(DayDigitalSamplingTextField, gridBagConstraints);

        getContentPane().add(Iaga2002OptionsPanel, java.awt.BorderLayout.CENTER);

        SetDefaultsButton.setText("Set Defaults");
        SetDefaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetDefaultsButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(SetDefaultsButton);

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(OKButton);

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });
        ButtonPanel.add(CancelButton);

        getContentPane().add(ButtonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeDialog ();
    }//GEN-LAST:event_formWindowClosing

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // set properties from dialog
        if (FourthElementScalarFRadioButton.isSelected())
            GlobalObjects.configuration.setProperty("Export.FourthElement", "ScalarF");
        if (FourthElementVectorFRadioButton.isSelected())
            GlobalObjects.configuration.setProperty("Export.FourthElement", "VectorF");
        else
            GlobalObjects.configuration.setProperty("Export.FourthElement", "DeltaF");
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Minute.IntervalType", MinuteIntervalTypeTextField.getText ());
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Hour.IntervalType", HourIntervalTypeTextField.getText ());
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Day.IntervalType", DayIntervalTypeTextField.getText ());
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Minute.SamplePeriod", MinuteDigitalSamplingTextField.getText ());
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Hour.SamplePeriod", HourDigitalSamplingTextField.getText ());
        GlobalObjects.configuration.setProperty("Export.Iaga2002.Day.SamplePeriod", DayDigitalSamplingTextField.getText ());
        
        closeDialog ();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        closeDialog ();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void SetDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetDefaultsButtonActionPerformed
        FourthElementVectorFRadioButton.setSelected (true);
        MinuteIntervalTypeTextField.setText ("");
        HourIntervalTypeTextField.setText ("");
        DayIntervalTypeTextField.setText ("");
        MinuteDigitalSamplingTextField.setText ("");
        HourDigitalSamplingTextField.setText ("");
        DayDigitalSamplingTextField.setText ("");
    }//GEN-LAST:event_SetDefaultsButtonActionPerformed
    
    private void closeDialog ()
    {
        this.setVisible(false);
        this.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel DayDigitalSamplingLabel;
    private javax.swing.JTextField DayDigitalSamplingTextField;
    private javax.swing.JLabel DayIntervalTypeLabel;
    private javax.swing.JTextField DayIntervalTypeTextField;
    private javax.swing.ButtonGroup FourthElementButtonGroup;
    private javax.swing.JRadioButton FourthElementDeltaFRadioButton;
    private javax.swing.JLabel FourthElementLabel;
    private javax.swing.JRadioButton FourthElementScalarFRadioButton;
    private javax.swing.JRadioButton FourthElementVectorFRadioButton;
    private javax.swing.JPanel GeneralOptionsPanel;
    private javax.swing.JLabel HourDigitalSamplingLabel;
    private javax.swing.JTextField HourDigitalSamplingTextField;
    private javax.swing.JLabel HourIntervalTypeLabel;
    private javax.swing.JTextField HourIntervalTypeTextField;
    private javax.swing.JPanel Iaga2002OptionsPanel;
    private javax.swing.JLabel MinuteDigitalSamplingLabel;
    private javax.swing.JTextField MinuteDigitalSamplingTextField;
    private javax.swing.JLabel MinuteIntervalTypeLabel;
    private javax.swing.JTextField MinuteIntervalTypeTextField;
    private javax.swing.JButton OKButton;
    private javax.swing.JButton SetDefaultsButton;
    // End of variables declaration//GEN-END:variables

    public static int getFourthElementProperty ()
    {
        String string;
        
        string = GlobalObjects.configuration.getProperty("Export.FourthElement", "VectorF");
        if (string.equalsIgnoreCase("VectorF")) return GeomagAbsoluteValue.COMPONENT_F;
        else if (string.equalsIgnoreCase("VectorF")) return GeomagAbsoluteValue.COMPONENT_F_SCALAR;
        else return GeomagAbsoluteValue.COMPONENT_F_DIFF;
    }
    
    public static String getIaga2002MinuteIntervalType ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Minute.IntervalType", "");
    }
    public static String getIaga2002HourIntervalType ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Hour.IntervalType", "");
    }
    public static String getIaga2002DayIntervalType ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Day.IntervalType", "");
    }
    
    public static String getIaga2002MinuteDigitalSampling ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Minute.SamplePeriod", "");
    }
    public static String getIaga2002HourDigitalSampling ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Hour.SamplePeriod", "");
    }
    public static String getIaga2002DayDigitalSampling ()
    {
        return GlobalObjects.configuration.getProperty("Export.Iaga2002.Day.SamplePeriod", "");
    }
    
    public static String getDefaultIaga2002MinuteIntervalType ()
    {
        return "Filtered 1-minute (00:30 - 01:29)";
    }
    public static String getDefaultIaga2002HourIntervalType ()
    {
        return "1-hour (00:00 - 00:59)";
    }
    public static String getDefaultIaga2002DayIntervalType ()
    {
        return "1-day (00-23)";
    }
    
    
}
