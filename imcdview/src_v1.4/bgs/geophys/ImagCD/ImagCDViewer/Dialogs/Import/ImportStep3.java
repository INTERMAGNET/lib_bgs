/*
 * ImportStep1.java
 *
 * Created on 27 December 2008, 10:33
 */

package bgs.geophys.ImagCD.ImagCDViewer.Dialogs.Import;

import bgs.geophys.ImagCD.ImagCDViewer.Utils.ImportThread;
import bgs.geophys.ImagCD.ImagCDViewer.Utils.ImportThread.GeomagFile;
import bgs.geophys.library.Swing.SwingUtils;
import java.awt.event.ActionEvent;
import java.io.File;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author  smf
 */
public class ImportStep3 extends javax.swing.JPanel 
{
    
    /** Creates new form ImportStep1 */
    public ImportStep3() 
    {
        int count;
        String list_data [];
        JComboBox list;
        TableColumn columns [];
        DefaultTableCellRenderer renderer;
        TableCellRenderer header_renderer;
        
        initComponents();
        
        // retrieve columns
        columns = new TableColumn [3];
        for (count=0; count<columns.length; count++)
            columns [count] = FileListTable.getColumnModel().getColumn(count);
        
        // create a list selection object for the file format column
        list_data = new String [4];
        list_data [0] = ImportThread.toString(ImportThread.FileFormat.CD);
        list_data [1] = ImportThread.toString(ImportThread.FileFormat.IAGA_2002);
        list_data [2] = ImportThread.toString(ImportThread.FileFormat.IMF);
        list_data [3] = ImportThread.toString(ImportThread.FileFormat.UNKNOWN);
        list = new JComboBox (list_data);
        list.setEditable(false);
        columns[1].setCellEditor(new DefaultCellEditor (list));
        
        // fix the table column widths
        SwingUtils.ResizeTableColumnWidths(FileListTable, 1, 1000, 90, 5, 5);
        
        // Set up tool tips for the editable columns
        renderer = new DefaultTableCellRenderer();
        renderer.setToolTipText ("Click to change the file type");
        columns[1].setCellRenderer(renderer);

        // Set up tool tips for the editable column headers
        header_renderer = columns[1].getHeaderRenderer();
        if (header_renderer instanceof DefaultTableCellRenderer) 
            ((DefaultTableCellRenderer) header_renderer).setToolTipText("Click the file type to change it");
        header_renderer = columns[2].getHeaderRenderer();
        if (header_renderer instanceof DefaultTableCellRenderer) 
            ((DefaultTableCellRenderer) header_renderer).setToolTipText("Click the box to change whether the file is used");
    }
    
    public void setChosenDirectory (File dir)
    {
        ChosenDirectoryTextField.setText (dir.getAbsolutePath());
    }
    
    /** set the loading status message */
    public void setStatusMessage (String msg)
    {
        StatusTextField.setText (msg);
    }
    
    /** add a geomag file to the list of files */
    public void addGeomagFile (ImportThread.GeomagFile geomag_file)
    {
        DefaultTableModel model;
        Object row [];

        // the first column contains the GeomagFile object, so
        // it can be referenced if the user edits the settings
        // in the other columns - the GeomagFile object must have
        // a toString method that displays the full path name
        // to the file
        row = new Object [3];
        row [0] = (Object) geomag_file;
        row [1] = (Object) geomag_file.getTypeString();
        row [2] = (Object) new Boolean (geomag_file.isInUse());
        
        model = (DefaultTableModel) FileListTable.getModel();
        model.addRow (row);
    }
    
    /** remove all elements from the table */
    public void removeAllGeomagFiles ()
    {
        DefaultTableModel model;
        
        model = (DefaultTableModel) FileListTable.getModel();
        while (model.getRowCount() > 0)
            model.removeRow(0);
    }
    
    /** update the GeomagFile objects to reflect any changes that the user
     * has made */
    public void updateGeomagFilesFromUI ()
    {
        int count;
        DefaultTableModel model;
        GeomagFile geomag_file;
        String data_format;
        Boolean file_in_use;
        
        model = (DefaultTableModel) FileListTable.getModel();
        for (count=0; count<model.getRowCount(); count++)
        {
            geomag_file = (ImportThread.GeomagFile) model.getValueAt(count, 0);
            data_format = (String) model.getValueAt(count, 1);
            file_in_use = (Boolean) model.getValueAt(count, 2);
            geomag_file.setType (data_format);
            geomag_file.setInUse (file_in_use.booleanValue());
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TitleLabel = new javax.swing.JLabel();
        FilePanel = new javax.swing.JPanel();
        FileListScrollPane = new javax.swing.JScrollPane();
        FileListTable = new javax.swing.JTable();
        StatusPanel = new javax.swing.JPanel();
        ChosenDirectoryLabel = new javax.swing.JLabel();
        ChosenDirectoryTextField = new javax.swing.JTextField();
        StatusLabel = new javax.swing.JLabel();
        StatusTextField = new javax.swing.JTextField();
        InstructionsLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        TitleLabel.setText("<html><h2>Step 3 of 6: Check selected files</h2><html>"); // NOI18N
        add(TitleLabel, java.awt.BorderLayout.NORTH);

        FilePanel.setLayout(new java.awt.BorderLayout());

        FileListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File name", "File type", "Use this file"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FileListScrollPane.setViewportView(FileListTable);

        FilePanel.add(FileListScrollPane, java.awt.BorderLayout.CENTER);

        StatusPanel.setLayout(new java.awt.GridBagLayout());

        ChosenDirectoryLabel.setText("Directory data read from:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        StatusPanel.add(ChosenDirectoryLabel, gridBagConstraints);

        ChosenDirectoryTextField.setColumns(40);
        ChosenDirectoryTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        StatusPanel.add(ChosenDirectoryTextField, gridBagConstraints);

        StatusLabel.setText("Progress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        StatusPanel.add(StatusLabel, gridBagConstraints);

        StatusTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        StatusPanel.add(StatusTextField, gridBagConstraints);

        FilePanel.add(StatusPanel, java.awt.BorderLayout.SOUTH);

        add(FilePanel, java.awt.BorderLayout.CENTER);

        InstructionsLabel.setText("<html>\n<h3>Information</h3>\n\nFiles are being chosen (based on their file names) from the directory you chose. Once the choice is complete you can change<br>\nwhich files will be read before proceeding to reading the data. If the software has incorrectly identified a file, click on the<br>\nfile type in the 2nd column to change it.\n\n</html>"); // NOI18N
        add(InstructionsLabel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ChosenDirectoryLabel;
    private javax.swing.JTextField ChosenDirectoryTextField;
    private javax.swing.JScrollPane FileListScrollPane;
    private javax.swing.JTable FileListTable;
    private javax.swing.JPanel FilePanel;
    private javax.swing.JLabel InstructionsLabel;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTextField StatusTextField;
    private javax.swing.JLabel TitleLabel;
    // End of variables declaration//GEN-END:variables
    
}
