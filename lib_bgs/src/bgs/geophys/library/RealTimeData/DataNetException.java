/*
 * NetException.java
 *
 * Created on 25 August 2003, 14:06
 */

package bgs.geophys.library.RealTimeData;

/***************************************************************
 * NetException is a class that provides an exception for
 * the Net suite of interfaces. Each suite implementation should 
 * extend this exception with its own custom conditions.
 * Every instance has a code which can
 * be obtained by calling the GetCode method. Error processors
 * can check the code against the list of public constant
 * error code values.
 *
 * @author Iestyn Evans
 **************************************************************/
public class DataNetException extends java.lang.Exception {
    
    // private member veriables
    /********************************************************
     * Holds the error code associated with this error.
     ********************************************************/
    protected int code;           // the code for this error

    /** This error code is generated (mostly!) by remote software. All
      * remote error codes have positive values to distinguish them from
      * client generated codes. */
    public static final int END_OF_EVENT_LIST = 44; // Defined by Sdas server
    
    /** This error code is generated by local (client side) software. All
      * local error codes have negative values to distinguish them from
      * server generated codes. */
    public static final int NO_VALID_PROTOCOL = -1001;
    /** This error code is generated by local (client side) software. All
      * local error codes have negative values to distinguish them from
      * server generated codes. */
    public static final int BAD_NETWORK_ADDRESS = -1002;
    
    /***************************************************************
     * Constructs an NetException with the specified detail message.
     *
     * @param cd the code for the exception - using this parameter
     *        allows error processors to quickly find the errors
     *        they want to process
     * @param msg the detail message.
     **************************************************************/
    public DataNetException(int cd, String msg)
    {
        super(msg);
        code = cd;
    }

    /****************************************************************
     * Get the error code for this exception.
     *
     * @return the error code
     ****************************************************************/
    public int GetErrorCode ()
    {
        return code;
    }
    
    /****************************************************************
     * Override for toString that doesn't print the class name
     *
     * @return the exception message
     ***************************************************************/
    public String toString ()
    {
        return this.getMessage();
    }
    
    /****************************************************************
     * Returns wether the current code is about missing data
     *
     * @return True if code represents missing data, false otherwise.
     ***************************************************************/
    public boolean isDataMissingCode()
    {
        // Inheriting exeptions should override this.
        return false;
    }
}
